package simulation;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Random;



/**
 * A picker who is in charge of picking up required fascias according to the instruction from the
 * system and send them to the marshalling area after receiving a request from the system.
 */
public class Picker extends Worker {

  private Queue<Request> waitList = new LinkedList<>();


  /**
   * Create a new picker with information about the warehouse he is working in and his name.
   */
  public Picker(Warehouse warehouse, String name) {
    super(warehouse, name);
    logger.info("Picker " + name + " is ready for picking request.\n");
  }


  /**
   * Get WaitList.
   */
  public Queue<Request> getWaitList() {
    return waitList;
  }


  /**
   * Receive a new request.
   */
  @Override
  public void receiveTask(Request request) {
    if (reqNowHandling == null) {
      reqNowHandling = request;
      currentWork = new Pallet(reqNowHandling.getId());
      logger
          .info("Picker " + name + " has received the request: " + reqNowHandling.getId() + ".\n");
    } else {
      logger.info("Picker " + name + "Picker " + name + " is busy, now handling the request: "
          + reqNowHandling.getId() + "\n" + name
          + " will handle it later. Listed in the waiting list.\n");

      waitList.add(request);
    }
  }


  /**
   * Pick up the next fascia on the request.
   */
  @Override
  public void work() {
    // Get the information and location of the next fascia to pick, according
    // to the current reuquest.
    if (reqNowHandling != null) {
      String[] pickInfo = reqNowHandling.getPickInfo();
      if (pickInfo != null) {
        // Get the location of the fascia to pick.
        String location = pickInfo[0];
        // Get the sku number of the fascia to pick.
        String skuNum = pickInfo[1];
        logger.info("Picker " + name + ": pick " + skuNum + " in " + location + ".\n");
        // Check if the picking place has enough number of fascias left.
        if (warehouse.getNumOfFascia(location) <= 5) {
          // if there are less than or equal to 5 fascias left,
          // get the fascias replenished.
          logger.info("Replenisher is ready to replenish " + location + ",\n");
          warehouse.getReplenished(location, skuNum);
        }
        // Pick up the fascia and put it into the current pallet.
        warehouse.getPicked(location);
        currentWork.load(skuNum);
        logger.info("Picker " + name + " has picked the fascia with SKU number: " + skuNum + "\n");
        reqNowHandling.updateStatus(skuNum, "picked.\n");
        reqNowHandling.updateStatus(skuNum, "picked.\n");
        if (reqNowHandling.peekNextInfo() == null) {
          moveToNextStage();
        }
      } else {
        logger.info("No picking info found. This is probably due to the absence of"
            + " specified skus in the order.\n");
      }
    } else {
      logger.info("No request for picker " + name + "\n");
    }
  }

  /**
   * Let the picker pick the wrong fascia. If situation == 1, it means that the picker does not pick
   * the correct fascia again (maybe he picks the wrong fascia and scans the correct one or maybe he
   * just ignores the warning generated by the system). If situation == 2, it means that the picker
   * will repick the correct fascia.
   */
  public void pickWrong(int situation) {
    if (reqNowHandling != null) {
      String[] pickInfo = reqNowHandling.peekNextInfo();
      if (situation == 1) {
        reqNowHandling.getPickInfo();
      }
      if (pickInfo != null) {
        String location = pickInfo[0];
        String skuNum = pickInfo[1];
        Random rand = new Random();
        logger.info("Picker " + name + " has picked the wrong fascia with skuNum "
            + Integer.toString(rand.nextInt(48)) + " instead of " + skuNum + " in " + location
            + " \n");
      }
    }
  }

  /**
   * Go to the replenishing place after picking all fascias on a request.
   */
  @Override
  public void moveToNextStage() {
    // move to the marshalling place.
    if (reqNowHandling != null) {
      warehouse.moveToMashaling(currentWork);
      logger.info("Picker " + name + "  finished picking and moved the request. "
          + reqNowHandling.getId() + " to the marshalling area.\n");
      // clear the current work, get ready for a new one.
      currentWork = null;
      reqNowHandling = null;
      logger.info("Picker " + name + " is ready for the next picking request.\n");
      // try getting another request.
      if (!waitList.isEmpty()) {
        Request request = waitList.poll();
        receiveTask(request);
        logger.info(
            "Picker " + name + " now receives the waitlisted request. " + request.getId() + "\n");
      }
    }
  }
}
